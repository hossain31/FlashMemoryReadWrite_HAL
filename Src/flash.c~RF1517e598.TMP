/**
  ******************************************************************************
  * File Name          : flash.c
  * Description        : FLASH Interface configuration functions
  ******************************************************************************
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
	
	/* Includes ------------------------------------------------------------------*/
#include "flash.h"
#include "stm32f3xx_hal.h"

/**
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void flashInit(void)
{ 
  /* Unlock the Flash memory */
  HAL_FLASH_Unlock();

  /* Clear all Flash flags */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR | FLASH_FLAG_BSY);
}

/**
  * @brief  Read flash page from a given address
  * @param  None
  * @retval None
  */
void readPage(uint32_t pgStartAddr, uint8_t *pgImage)
{
	//pgStartAddr = PageStartAddr;
	for (int i=0; i<2048; i++)
	{
		*(pgImage++) = *(uint8_t*) pgStartAddr++;
	}
}


uint32_t getAddrInPage(uint32_t addr)
{
	//PageStartAddr=0x00008000;
	//addr=(PageDataStartAddr-PageStartAddr)%0x00008000;
	addr=(addr-PageStartAddr);
	return addr;
	
	//(uint8_t*)pgDataAddrInPage = &pgImage[i];
}

/**
  * @brief  Modify the desired location of the buffer(pgImage) and save it into the dataPtr array
  * @param  None
  * @retval None
  */
uint32_t modifyPageImage(uint32_t pgDataAddrInPage, uint32_t numOfBytes, uint8_t* dataPtr)
{
	readPage(0x00008000, dataPtr);
	pgDataAddrInPage= getAddrInPage(pgDataAddrInPage);
	//pgDataAddrInPage = 0x00000005;
	//pgDataAddrInPage= pgDataAddrInPage-PageStartAddr;
	
	*(dataPtr+pgDataAddrInPage+0) = (uint8_t)((DATA_32 >> 0) & 0x000000FF); //DATA_32=0xABCDEF24
	*(dataPtr+pgDataAddrInPage+1) = (uint8_t)((DATA_32 >> 8) & 0x000000FF);
	*(dataPtr+pgDataAddrInPage+2) = (uint8_t)((DATA_32 >> 16) & 0x000000FF);
	*(dataPtr+pgDataAddrInPage+3) = (uint8_t)((DATA_32 >> 24) & 0x000000FF);
	
	return 0;
}

/**
  * @brief  Erase flash page from the PageStartAddr address
  * @param  None
  * @retval None
  */
int erasePage(uint32_t pgStartAddr)
{
	flashInit();
	
	static FLASH_EraseInitTypeDef EraseInitStruct; //Variable used for Erase procedure
  uint32_t NbOfPages = 0x00000001;
	uint32_t PageError = 0xFFFFFFFF;
    
	/* Erase the user Flash area */
  //pgStartAddr = PageStartAddr;  // Get the 1st page to erase
	//pgStartAddr = 0x00008000;  // Get the 1st page to erase
  //NbOfPages = (PageEndAddr - PageStartAddr) / FLASH_PAGE_SIZE; //Get the number of pages to erase from 1st page
 	
	/* Fill EraseInit structure */
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
	EraseInitStruct.PageAddress = pgStartAddr;
	EraseInitStruct.NbPages     = NbOfPages;
	
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
	{
		while(1)
		{
			return(-1);
		}
	} 
	return (0);
}

/**
  * @brief  Write flash page from the PageStartAddr address
  * @param  None
  * @retval None
  */
uint32_t writePage(uint32_t pgStartAddr, uint8_t *pgImage)
{
	//flashInit();
	modifyPageImage(0x00008004, 4, pgImage);
	
	erasePage(0x00008000);
	
	for (int i=0; i<(PageEndAddr-PageStartAddr); i=+2) //PageEndAddr=0x00008800, PageStartAddr=0x00008000, //2KB
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, pgStartAddr+i, pgImage[i]*256 + pgImage[i+1]);
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pgStartAddr+i, pgImage[i]*256 + pgImage[i+1] + pgImage[i+2] + pgImage[i+3]);
		
		/*
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, pgStartAddr+i, pgImage[i]*256 + pgImage[i+1])== HAL_OK)
		{
			pgStartAddr=pgStartAddr+i;
		}
		else
    { 
			return(-1);
    }
		*/
	}
	HAL_FLASH_Lock(); //Lock the Flash to disable the flash control register access
	return (0);
  
}

/**
  * @brief  Verify the newly written page in flash from the buffer page
  * @param  None
  * @retval None
  */
uint32_t verifyPage(uint32_t pgStartAddr, uint32_t pgImage)
{
	return 0;
}

/**
  * @brief  Get the address of the PageStartAddr and PageEndAddr
  * @param  None
  * @retval None
  */
uint32_t getPageAddr(uint32_t addr)
{
  uint32_t page = 0;

  if((addr < ADDR_FLASH_PAGE_1) && (addr >= ADDR_FLASH_PAGE_0))
  {
		page = ADDR_FLASH_PAGE_0;
  }
  else if((addr < ADDR_FLASH_PAGE_2) && (addr >= ADDR_FLASH_PAGE_1))
  {
    page = ADDR_FLASH_PAGE_1;  
  }
  else if((addr < ADDR_FLASH_PAGE_3) && (addr >= ADDR_FLASH_PAGE_2))
  {
    page = ADDR_FLASH_PAGE_2;  
  }
  else if((addr < ADDR_FLASH_PAGE_4) && (addr >= ADDR_FLASH_PAGE_3))
  {
    page = ADDR_FLASH_PAGE_3;  
  }
  else if((addr < ADDR_FLASH_PAGE_5) && (addr >= ADDR_FLASH_PAGE_4))
  {
    page = ADDR_FLASH_PAGE_4;  
  }
  else if((addr < ADDR_FLASH_PAGE_6) && (addr >= ADDR_FLASH_PAGE_5))
  {
    page = ADDR_FLASH_PAGE_5;  
  }
  else if((addr < ADDR_FLASH_PAGE_7) && (addr >= ADDR_FLASH_PAGE_6))
  {
    page = ADDR_FLASH_PAGE_6;  
  }
  else if((addr < ADDR_FLASH_PAGE_8) && (addr >= ADDR_FLASH_PAGE_7))
  {
    page = ADDR_FLASH_PAGE_7;  
  }
  else if((addr < ADDR_FLASH_PAGE_9) && (addr >= ADDR_FLASH_PAGE_8))
  {
    page = ADDR_FLASH_PAGE_8;  
  }
  else if((addr < ADDR_FLASH_PAGE_10) && (addr >= ADDR_FLASH_PAGE_9))
  {
    page = ADDR_FLASH_PAGE_9;  
  }
  else if((addr < ADDR_FLASH_PAGE_11) && (addr >= ADDR_FLASH_PAGE_10))
  {
    page = ADDR_FLASH_PAGE_10;  
  }
	else if((addr < ADDR_FLASH_PAGE_12) && (addr >= ADDR_FLASH_PAGE_11))
  {
		page = ADDR_FLASH_PAGE_11;
  }
  else if((addr < ADDR_FLASH_PAGE_13) && (addr >= ADDR_FLASH_PAGE_12))
  {
    page = ADDR_FLASH_PAGE_12;  
  }
  else if((addr < ADDR_FLASH_PAGE_14) && (addr >= ADDR_FLASH_PAGE_13))
  {
    page = ADDR_FLASH_PAGE_13;  
  }
  else if((addr < ADDR_FLASH_PAGE_15) && (addr >= ADDR_FLASH_PAGE_14))
  {
    page = ADDR_FLASH_PAGE_14;  
  }
  else if((addr < ADDR_FLASH_PAGE_16) && (addr >= ADDR_FLASH_PAGE_15))
  {
    page = ADDR_FLASH_PAGE_15;  
  }
  else if((addr < ADDR_FLASH_PAGE_17) && (addr >= ADDR_FLASH_PAGE_16))
  {
    page = ADDR_FLASH_PAGE_16;  
  }
  else if((addr < ADDR_FLASH_PAGE_18) && (addr >= ADDR_FLASH_PAGE_17))
  {
    page = ADDR_FLASH_PAGE_17;  
  }
  else if((addr < ADDR_FLASH_PAGE_19) && (addr >= ADDR_FLASH_PAGE_18))
  {
    page = ADDR_FLASH_PAGE_18;  
  }
  else if((addr < ADDR_FLASH_PAGE_20) && (addr >= ADDR_FLASH_PAGE_19))
  {
    page = ADDR_FLASH_PAGE_19;  
  }
  else if((addr < ADDR_FLASH_PAGE_21) && (addr >= ADDR_FLASH_PAGE_20))
  {
    page = ADDR_FLASH_PAGE_20;  
  }
	else if((addr < ADDR_FLASH_PAGE_22) && (addr >= ADDR_FLASH_PAGE_21))
  {
		page = ADDR_FLASH_PAGE_21;
  }
  else if((addr < ADDR_FLASH_PAGE_23) && (addr >= ADDR_FLASH_PAGE_22))
  {
    page = ADDR_FLASH_PAGE_22;  
  }
  else if((addr < ADDR_FLASH_PAGE_24) && (addr >= ADDR_FLASH_PAGE_23))
  {
    page = ADDR_FLASH_PAGE_23;  
  }
  else if((addr < ADDR_FLASH_PAGE_25) && (addr >= ADDR_FLASH_PAGE_24))
  {
    page = ADDR_FLASH_PAGE_24;  
  }
  else if((addr < ADDR_FLASH_PAGE_26) && (addr >= ADDR_FLASH_PAGE_25))
  {
    page = ADDR_FLASH_PAGE_25;  
  }
  else if((addr < ADDR_FLASH_PAGE_27) && (addr >= ADDR_FLASH_PAGE_26))
  {
    page = ADDR_FLASH_PAGE_26;  
  }
  else if((addr < ADDR_FLASH_PAGE_28) && (addr >= ADDR_FLASH_PAGE_27))
  {
    page = ADDR_FLASH_PAGE_27;  
  }
  else if((addr < ADDR_FLASH_PAGE_29) && (addr >= ADDR_FLASH_PAGE_28))
  {
    page = ADDR_FLASH_PAGE_28;  
  }
  else if((addr < ADDR_FLASH_PAGE_30) && (addr >= ADDR_FLASH_PAGE_29))
  {
    page = ADDR_FLASH_PAGE_29;
  }
	else
  {
    page = ADDR_FLASH_PAGE_30;
  }
  return page;
}
